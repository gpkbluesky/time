{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_useState","useState","_useState2","Object","slicedToArray","day","setDay","_useState3","_useState4","hour","setHour","_useState5","_useState6","minute","setMinute","_useState7","_useState8","second","setSecond","useEffect","setInterval","intervals","Date","Math","floor","react_default","a","createElement","className","Moment","format","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gLAgFeA,SA5EH,WACV,IADgBC,EAGMC,mBAAS,KAHfC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAGTK,EAHSH,EAAA,GAGJI,EAHIJ,EAAA,GAAAK,EAIQN,mBAAS,KAJjBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAITE,EAJSD,EAAA,GAIHE,EAJGF,EAAA,GAAAG,EAKYV,mBAAS,KALrBW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAKTE,EALSD,EAAA,GAKDE,EALCF,EAAA,GAAAG,EAMYd,mBAAS,KANrBe,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GAMTE,EANSD,EAAA,GAMDE,EANCF,EAAA,GAoChB,OA5BAG,oBAAU,WACRC,YAAY,WACV,IAEIC,GAFc,IAAIC,KACP,IAAIA,KAVP,eAW+B,IAEvCjB,EAAMkB,KAAKC,MAAMH,EAAS,OAE9BA,GAAmB,IADnBhB,EAAMA,EAAM,GAAK,IAAMA,EAAMA,GACL,GAAK,GAE7B,IAAII,EAAOc,KAAKC,MAAMH,EAAS,MAE/BA,GAAoB,IADpBZ,EAAOA,EAAO,GAAK,IAAMA,EAAOA,GACP,GAEzB,IAAII,EAASU,KAAKC,MAAMH,EAAY,IAEpCA,GAAsB,IADtBR,EAASA,EAAS,GAAK,IAAMA,EAASA,GAGtC,IAAII,EAASM,KAAKC,MAAMH,GACxBJ,EAASA,EAAS,GAAK,IAAMA,EAASA,EAEtCX,EAAOD,GACPK,EAAQD,GACRK,EAAUD,GACVK,EAAUD,IACT,OAIHQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,oCACgBE,IAxCR,cAwCwBC,OAAO,cADvC,4CAIFL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,UAAUvB,GACvBoB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,YAEFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,kBAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,UAAUnB,GACvBgB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,aAEFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,kBAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,UAAUf,GACvBY,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,YAEFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,kBAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,UAAUX,GACvBQ,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,iBC5DQG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOZ,EAAAC,EAAAC,cAACW,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e1093ea2.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Moment from \"moment\";\nimport \"./App.css\";\n\nconst App = () => {\n  const thatDay = \"06/05/2019\";\n\n  const [day, setDay] = useState(\"0\");\n  const [hour, setHour] = useState(\"0\");\n  const [minute, setMinute] = useState(\"0\");\n  const [second, setSecond] = useState(\"0\");\n\n  useEffect(() => {\n    setInterval(() => {\n      let currentDate = new Date();\n      let thatDate = new Date(thatDay);\n      let intervals = (currentDate - thatDate) / 1000;\n\n      let day = Math.floor(intervals / (60 * 60 * 24));\n      day = day < 10 ? \"0\" + day : day;\n      intervals -= day * 60 * 60 * 24;\n\n      let hour = Math.floor(intervals / (60 * 60));\n      hour = hour < 10 ? \"0\" + hour : hour;\n      intervals -= hour * 60 * 60;\n\n      let minute = Math.floor(intervals / 60);\n      minute = minute < 10 ? \"0\" + minute : minute;\n      intervals -= minute * 60;\n\n      let second = Math.floor(intervals);\n      second = second < 10 ? \"0\" + second : second;\n\n      setDay(day);\n      setHour(hour);\n      setMinute(minute);\n      setSecond(second);\n    }, 1000);\n  });\n\n  return (\n    <div className=\"App\">\n      <div className=\"group\">\n        <div className=\"introducing\">\n          <p>\n            Tính từ ngày {Moment(thatDay).format(\"DD-MM-YYYY\")} thì đã được:\n          </p>\n        </div>\n        <div className=\"clock\">\n          <div className=\"clock-element day\">\n            <p className=\"number\">{day}</p>\n            <p className=\"text\">NGÀY</p>\n          </div>\n          <div className=\"clock-element dot dot1\">\n            <span>:</span>\n          </div>\n          <div className=\"clock-element hour\">\n            <p className=\"number\">{hour}</p>\n            <p className=\"text\">GIỜ</p>\n          </div>\n          <div className=\"clock-element dot dot2\">\n            <span>:</span>\n          </div>\n          <div className=\"clock-element minute\">\n            <p className=\"number\">{minute}</p>\n            <p className=\"text\">PHÚT</p>\n          </div>\n          <div className=\"clock-element dot dot3\">\n            <span>:</span>\n          </div>\n          <div className=\"clock-element second\">\n            <p className=\"number\">{second}</p>\n            <p className=\"text\">GIÂY</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}